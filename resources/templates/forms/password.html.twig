{% include 'forms/input.html.twig' %}
<ul class="hide-bullets">
  {% if property('minLength') > 0 %}
  <li><ion-icon class="min-length" name="checkmark-circle"></ion-icon> Min {{ property('minLength') }} characters</li>
  {% endif %}
  <li><ion-icon class="max-length" name="checkmark-circle"></ion-icon> Max {{ property('maxLength') }} characters</li>
  {% if property('minSpecialCharacters') > 0 %}
  <li><ion-icon class="min-special" name="checkmark-circle"></ion-icon> Contains at least {{ property('minSpecialCharacters') }} of one of these characters: "{{ property('specialCharacters') }}"</li>
  {% endif %}
  {% if property('minDigits') > 0 %}
  <li><ion-icon class="min-digits" name="checkmark-circle"></ion-icon> Contains at least {{ property('minDigits') }} digits.</li>
  {% endif %}
  {% if property('minLowerCase') > 0 %}
  <li><ion-icon class="min-lower" name="checkmark-circle"></ion-icon> Contains at least {{ property('minLowerCase') }} lower case a-z.</li>
  {% endif %}
  {% if property('minUpperCase') > 0 %}
  <li><ion-icon class="min-upper" name="checkmark-circle"></ion-icon> Contains at least {{ property('minUpperCase') }} upper case A-Z.</li>
  {% endif %}
</ul>
<apie-script>
(async function (element) {
  const ul = element.nextElementSibling;
  const specialCharacters = {{ property('specialCharacters') | json_encode | raw }};
  const allowedCharacters = ('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' + specialCharacters).split('');
  async function stripUnknownCharacters() {
    await Promise.resolve()
    await Promise.resolve()
    const list = String(element.value ?? '').split('');
    let newValue = '';
    list.forEach(function (character) {
      if (allowedCharacters.indexOf(character) > -1) {
        newValue += character;
      }
    });
    element.value = newValue;
  }
  function updateBullet(elm, condition) {
    if (!elm) {
      return
    }
    if (condition) {
      elm.name = 'checkmark-circle';
      elm.style.color = 'yellowgreen';
    } else {
      elm.name = 'close-circle';
      elm.style.color = 'red';
    }
  }
  function updateBullets() {
    let countSpecial = 0;
    let countDigits = 0;
    let countLower = 0;
    let countUpper = 0;
    String(element.value ?? '').split('').forEach(function (character) {
      if (specialCharacters.split('').indexOf(character) > -1) {
        countSpecial++;
      }
      if ('0123456789'.split('').indexOf(character) > -1) {
        countDigits++;
      }
      if ('abcdefghijklmnopqrstuvwxyz'.split('').indexOf(character) > -1) {
        countLower++;
      }
      if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').indexOf(character) > -1) {
        countUpper++;
      }
    });
    updateBullet(ul.querySelector('.min-length'), String(element.value ?? '').length >= {{ property('minLength') | json_encode | raw }});
    updateBullet(ul.querySelector('.max-length'), String(element.value ?? '').length < {{ property('maxLength') | json_encode | raw }});
    updateBullet(ul.querySelector('.min-special'), countSpecial >= {{ property('minSpecialCharacters') | json_encode | raw }});
    updateBullet(ul.querySelector('.min-digits'), countDigits >= {{ property('minDigits') | json_encode | raw }});
    updateBullet(ul.querySelector('.min-lower'), countLower >= {{ property('minLowerCase') | json_encode | raw }});
    updateBullet(ul.querySelector('.min-upper'), countUpper >= {{ property('minUpperCase') | json_encode | raw }});
  }
  element.classList.remove('unbound-password');
  element.addEventListener('keydown', function (event) {
    const key = String(event.key);
    if (key.length > 1) {
      return true;
    }
    if (allowedCharacters.indexOf(key) > -1) {
      return true;
    }
    event.stopPropagation();
    event.preventDefault();
    return false;
  });
  element.addEventListener('input', function () {
    stripUnknownCharacters();
    updateBullets();
  });
  element.addEventListener('blur', function () {
    stripUnknownCharacters();
    updateBullets();
  });
  await Promise.resolve();
  await Promise.resolve();
  updateBullets();
})(document.querySelector('.unbound-password'));
</apie-script>